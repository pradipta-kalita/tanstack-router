/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as PostsImport } from './routes/posts'
import { Route as AboutImport } from './routes/about'
import { Route as Layout1Import } from './routes/_layout1'
import { Route as UserUsernameImport } from './routes/user.$username'
import { Route as Layout1UserRouteImport } from './routes/_layout1/user/route'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const Layout1Route = Layout1Import.update({
  id: '/_layout1',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UserUsernameRoute = UserUsernameImport.update({
  id: '/user/$username',
  path: '/user/$username',
  getParentRoute: () => rootRoute,
} as any)

const Layout1UserRouteRoute = Layout1UserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => Layout1Route,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout1': {
      id: '/_layout1'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Layout1Import
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/_layout1/user': {
      id: '/_layout1/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof Layout1UserRouteImport
      parentRoute: typeof Layout1Import
    }
    '/user/$username': {
      id: '/user/$username'
      path: '/user/$username'
      fullPath: '/user/$username'
      preLoaderRoute: typeof UserUsernameImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface Layout1RouteChildren {
  Layout1UserRouteRoute: typeof Layout1UserRouteRoute
}

const Layout1RouteChildren: Layout1RouteChildren = {
  Layout1UserRouteRoute: Layout1UserRouteRoute,
}

const Layout1RouteWithChildren =
  Layout1Route._addFileChildren(Layout1RouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof Layout1RouteWithChildren
  '/about': typeof AboutRoute
  '/posts': typeof PostsRoute
  '/search': typeof SearchRoute
  '/user': typeof Layout1UserRouteRoute
  '/user/$username': typeof UserUsernameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof Layout1RouteWithChildren
  '/about': typeof AboutRoute
  '/posts': typeof PostsRoute
  '/search': typeof SearchRoute
  '/user': typeof Layout1UserRouteRoute
  '/user/$username': typeof UserUsernameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_layout1': typeof Layout1RouteWithChildren
  '/about': typeof AboutRoute
  '/posts': typeof PostsRoute
  '/search': typeof SearchRoute
  '/_layout1/user': typeof Layout1UserRouteRoute
  '/user/$username': typeof UserUsernameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/posts'
    | '/search'
    | '/user'
    | '/user/$username'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/about' | '/posts' | '/search' | '/user' | '/user/$username'
  id:
    | '__root__'
    | '/'
    | '/_layout1'
    | '/about'
    | '/posts'
    | '/search'
    | '/_layout1/user'
    | '/user/$username'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  Layout1Route: typeof Layout1RouteWithChildren
  AboutRoute: typeof AboutRoute
  PostsRoute: typeof PostsRoute
  SearchRoute: typeof SearchRoute
  UserUsernameRoute: typeof UserUsernameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  Layout1Route: Layout1RouteWithChildren,
  AboutRoute: AboutRoute,
  PostsRoute: PostsRoute,
  SearchRoute: SearchRoute,
  UserUsernameRoute: UserUsernameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout1",
        "/about",
        "/posts",
        "/search",
        "/user/$username"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_layout1": {
      "filePath": "_layout1.tsx",
      "children": [
        "/_layout1/user"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/posts": {
      "filePath": "posts.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/_layout1/user": {
      "filePath": "_layout1/user/route.tsx",
      "parent": "/_layout1"
    },
    "/user/$username": {
      "filePath": "user.$username.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
